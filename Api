import crypto from "crypto";

// legge il body grezzo (serve per verificare la firma)
function readRawBody(req) {
  return new Promise((resolve, reject) => {
    let chunks = [];
    req.on("data", (c) => chunks.push(c));
    req.on("end", () => resolve(Buffer.concat(chunks)));
    req.on("error", reject);
  });
}

export default async function handler(req, res) {
  if (req.method !== "POST") {
    res.statusCode = 405;
    return res.end("Method Not Allowed");
  }

  const secret = process.env.WEBHOOK_SECRET || "";
  const signature = req.headers["x-hub-signature-256"] || "";

  const raw = await readRawBody(req);
  const expected =
    "sha256=" + crypto.createHmac("sha256", secret).update(raw).digest("hex");

  // confronto firma in modo costante
  const ok =
    signature.length === expected.length &&
    crypto.timingSafeEqual(Buffer.from(signature), Buffer.from(expected));

  if (!ok) {
    res.statusCode = 401;
    return res.end("Invalid signature");
  }

  // qui fai ci√≤ che ti serve con il payload
  const event = req.headers["x-github-event"];
  console.log("Evento:", event);

  res.statusCode = 200;
  res.setHeader("Content-Type", "application/json");
  res.end(JSON.stringify({ ok: true, event }));
}
